const int mic1 = A0;                  //mic1 on analogread pin 0
const int mic2 = A1;                  //mic2 on analogread pin 1
const int led_Right = 3;
const int led_Left = 4;
uint32_t t0, t;                       //variables to store time difference
const uint16_t fs = 10461;            //sampling frequency
const uint16_t sampleNum = 256;       //number of mic samples
volatile uint16_t sampleCount = 0;    //counter to count mic readings
const uint16_t N = 256;               //DFT length
const float Pi2N = 6.283185307/N;     //constant value of 2*pi/N
const uint8_t kstart = 5;             //starting frequency is kstart*fs/N
const uint8_t kend = 45;              //ending frequency is kend*fs/N
const uint8_t kdiff = kend - kstart;  //difference between start and end frequency bins
volatile uint16_t rawInputArray1[sampleNum] = {}; //array to hold mic1 readings
volatile uint16_t rawInputArray2[sampleNum] = {}; //array to hold mic2 readings
volatile uint32_t rawInputArray1Abs[kdiff] = {};  //array to hold frequency bin magnitudes
float coslookup[N] = {};                          //array to hold cos lookup values
float sinlookup[N] = {};                          //array to hold sin lookup values
const uint8_t freqNum = 12;               //number of max frequency values to store
volatile uint8_t freqCount = 0;           //counter to count max frequencies
volatile uint8_t freqsMax[freqNum] = {};  //array to hold values of max frequencies over time
const uint8_t magNum = 8;                 //number of average magnitudes values to store
volatile uint8_t magCount = 0;            //counter to count average magnitudes
volatile uint16_t magsAvg[magNum] = {};   //array to hold values of average magnitudes over time
const uint8_t freqLimit = ceil(800*N/fs); //frequency limit for freqsMax array
volatile uint16_t magLimit = 600;         //magnitude limit for freqsMax array
const uint8_t magCutoff = 10;             //limits ampAvg values from exceeding magCutoff*magLimit
const uint16_t magWeight = 500;           //added weight to ampAvg values
const uint8_t detectLimit = 8;            //number of detections threshold
const uint8_t ptpNum = 5;                 //number of max and min numbers to find from rawInputArrays to calculate peak to peak
volatile bool directionDetect = 0;        //boolean flag to indicate direction
volatile bool sirenDetect = 0;            //boolean flag to indicate siren

//Setup for ADC
void setupADC(){
  ADC->CTRLA.bit.ENABLE = 0;                     // Disable ADC
  while( ADC->STATUS.bit.SYNCBUSY == 1 );        // Wait for synchronization
  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256 |  // Divide Clock by 256, 10.461kHz
                   ADC_CTRLB_RESSEL_12BIT;       // Result in 12 bits
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |   // 1 sample
                     ADC_AVGCTRL_ADJRES(0x00ul); // Adjusting result by 0
  ADC->SAMPCTRL.reg = 0x00;                      // Sampling Time Length = 0
  ADC->CTRLA.bit.ENABLE = 1;                     // Enable ADC
  while( ADC->STATUS.bit.SYNCBUSY == 1 );        // Wait for synchronization
  analogReadResolution(12);
}


void ClockInit(void){
  GCLK->GENCTRL.reg = GCLK_GENCTRL_IDC |          // Improve duty cycle
                      GCLK_GENCTRL_GENEN |        // Enable generic clock gen
                      GCLK_GENCTRL_SRC(7) |       // Select 48MHz as source
                      GCLK_GENCTRL_ID(0);         // Apply to GCLK0
  while (GCLK->STATUS.bit.SYNCBUSY);              // Wait for synchronization

  GCLK->GENDIV.reg = GCLK_GENDIV_ID(0) |
                     GCLK_GENDIV_DIV(0);
}


void setup() {
  //pinMode(led_Right, OUTPUT);
  //pinMode(led_Left, OUTPUT);
  ClockInit();
  setupADC();             //sets up ADC
  Serial.begin(115200);   //begin serial communication
  delay(500);             //wait for ADC to stabilize
  populateLookup();       //populate sin and cos lookup tables
}


void loop() {
  readMics();                      //populates rawInputArrays with mic readings
  uint16_t ptp1 = calculatePTP1(); //calculates peak to peak of rawInputArray1
  uint16_t ptp2 = calculatePTP2(); //calculates peak to peak of rawInputArray2
  calculateDFT();                  //calculates DFT from rawInputArray1
  uint8_t freqMaxBin = freqMax();  //finds max frequency bin index
  magsAvgAdd();                    //finds average magnitudes of frequencies and adds to magsAvg array
  magLimitSet();                   //sets magnitudes limit by taking the average of the magsAvg array
  freqsMaxAdd(freqMaxBin);         //adds frequency index to freqsMax array if it meets the specs
  freqsMaxDetect();                //checks freqsMax array against detection threshold

  if (ptp1 > ptp2) {
    directionDetect = false;
  }
  else {
    directionDetect = true;
  }
  /*
  if (sirenDetect) {
    if (directionDetect) {
      analogWrite(led_Right, 200);
    }
    else {
      analogWrite(led_Left, 200);
    }
  }
  else {
    analogWrite(led_Right, 0);
    analogWrite(led_Left, 0);
  }
  */
  //t0 = millis();  
  //t = millis()-t0;
  //Serial.println(t);
  //printFreqsMax();
  //printMagsAvg();
  //Serial.println(magLimit);
  //printrawInputArray1Abs();
  //printrawInputArray1();
  Serial.println((freqMaxBin+kstart)*fs/N);
}


//Populate cos and sin lookup table
void populateLookup(){
  for (int k = 0; k < N; k++){
    coslookup[k] = cos(Pi2N*k);
    sinlookup[k] = sin(Pi2N*k);
  }
}


//Fill rawInputArray1 with mic1 input and rawInputArray2 with mic2 input
void readMics(){
  while (sampleCount < sampleNum) {
    rawInputArray1[sampleCount] = analogRead(mic1);
    rawInputArray2[sampleCount] = analogRead(mic2);
    sampleCount++;
  }
  sampleCount = 0;
}


uint16_t calculatePTP1(){
  uint16_t peaksMax[ptpNum] = {};                 //min ADC reading is 0
  uint16_t peaksMin[ptpNum] = {4095};             //max ADC reading is 4095
  for (int i = 0; i < sampleNum; i++) {           //Iterates through entire rawInputArray1
    for (int j = 0; j < ptpNum; j++){             //Iterates through entire peaksMax and peaksMin arrays
      if (rawInputArray1[i] > peaksMax[j]) {      //Finds maximum values of rawInputArray1
        for (int k = (ptpNum - 1); k > j; k--) {
          peaksMax[k] = peaksMax[k-1];
        }
        peaksMax[j] = rawInputArray1[i];
        break;
      }
      if (rawInputArray1[i] < peaksMin[j]) {      //Finds minimum values of rawInputArray1
        for (int k = (ptpNum - 1); k > j; k--) {
          peaksMin[k] = peaksMin[k-1];
        }
        peaksMin[j] = rawInputArray1[i];
        break;
      }
    }
  }
  /*
  for (int i = 0; i < ptpNum; i++) {
    Serial.print(peaksMax[i]);
    Serial.print(" ");
  }
  Serial.println();
  for (int i = 0; i < ptpNum; i++) {
    Serial.print(peaksMin[i]);
    Serial.print(" ");
  }
  Serial.println();
  */
  uint32_t peaksMaxAvg = 0;
  uint32_t peaksMinAvg = 0;
  for (int i = 0; i < ptpNum; i++) {
    peaksMaxAvg += peaksMax[i];
    peaksMinAvg += peaksMin[i];
  }
  peaksMaxAvg = peaksMaxAvg/ptpNum;
  peaksMinAvg = peaksMinAvg/ptpNum;
  return (peaksMaxAvg - peaksMinAvg);
}


uint16_t calculatePTP2(){
  uint16_t peaksMax[ptpNum] = {};                 //min ADC reading is 0
  uint16_t peaksMin[ptpNum] = {4095};             //max ADC reading is 4095
  for (int i = 0; i < sampleNum; i++) {           //Iterates through entire rawInputArray1
    for (int j = 0; j < ptpNum; j++){             //Iterates through entire peaksMax and peaksMin arrays
      if (rawInputArray2[i] > peaksMax[j]) {      //Finds maximum values of rawInputArray1
        for (int k = (ptpNum - 1); k > j; k--) {
          peaksMax[k] = peaksMax[k-1];
        }
        peaksMax[j] = rawInputArray2[i];
        break;
      }
      if (rawInputArray2[i] < peaksMin[j]) {      //Finds minimum values of rawInputArray1
        for (int k = (ptpNum - 1); k > j; k--) {
          peaksMin[k] = peaksMin[k-1];
        }
        peaksMin[j] = rawInputArray2[i];
        break;
      }
    }
  }
  /*
  for (int i = 0; i < ptpNum; i++) {
    Serial.print(peaksMax[i]);
    Serial.print(" ");
  }
  Serial.println();
  for (int i = 0; i < ptpNum; i++) {
    Serial.print(peaksMin[i]);
    Serial.print(" ");
  }
  Serial.println();
  */
  uint32_t peaksMaxAvg = 0;
  uint32_t peaksMinAvg = 0;
  for (int i = 0; i < ptpNum; i++) {
    peaksMaxAvg += peaksMax[i];
    peaksMinAvg += peaksMin[i];
  }
  peaksMaxAvg = peaksMaxAvg/ptpNum;
  peaksMinAvg = peaksMinAvg/ptpNum;
  return (peaksMaxAvg - peaksMinAvg);
}


//Calculates DFT of rawInputArray1
void calculateDFT(){
  float rawInputArray1Real[kdiff] = {};
  float rawInputArray1Imag[kdiff] = {};
  uint16_t modval;
  for (int k = 0; k < kdiff; k++){
    for (int i = 0; i < sampleNum; i++) {
      modval = i*(k+kstart) % N;
      rawInputArray1Real[k] = rawInputArray1Real[k] + (rawInputArray1[i] * coslookup[modval]);
      rawInputArray1Imag[k] = rawInputArray1Imag[k] + (rawInputArray1[i] * sinlookup[modval]);
    }
    rawInputArray1Abs[k] = sqrt( sq(rawInputArray1Real[k]) + sq(rawInputArray1Imag[k]) );
  }
}


//Finds maximum frequency bin index
uint8_t freqMax(){
  uint32_t maximum = 0;
  uint8_t index = 0;
  for (int i = 0; i < kdiff; i++) {
    if (rawInputArray1Abs[i] > maximum) {
      maximum = rawInputArray1Abs[i];
      index = i;
    }
  }
  return index;
}


//Determines whether to put freq into freqsMax array
void freqsMaxAdd(uint8_t index) {
  if (freqCount > freqNum - 1) freqCount = 0; //resets freqsMax array index count
  if ((rawInputArray1Abs[index] > magLimit) && (index + kstart > freqLimit)) {
    freqsMax[freqCount] = 1;
  }
  else {
    freqsMax[freqCount] = 0;
  }
  freqCount++;
}


//Sums freqsMax array and compares against detection threshold
void freqsMaxDetect() {
  uint8_t sum = 0;
  for (int i = 0; i < freqNum; i++) {
    sum += freqsMax[i];
  }
  if (sum >= detectLimit) {
    sirenDetect = true;
    Serial.println("SIREN");
  }
  else {
    sirenDetect = false;
  }
}


//Finds average frequency magnitudes
void magsAvgAdd() {
  uint32_t magAvgVal = 0;
  if (magCount > magNum - 1) magCount = 0; //resets magsAvg array index count
  for (int i = 0; i < kdiff; i++) {
    magAvgVal += rawInputArray1Abs[i];
  }
  magAvgVal = magAvgVal/kdiff;
  if (magAvgVal > magCutoff*magLimit) {
    magsAvg[magCount] = magCutoff*magLimit;
  }
  else {
    magsAvg[magCount] = magAvgVal+magWeight;
  }  
  magCount++; //increase count
}


//sets magnitudes limit by taking the average of the magsAvg array
void magLimitSet() {
  uint32_t magsAvgVal = 0;
  for (int i = 0; i < magNum; i++) {
    magsAvgVal += magsAvg[i];
  }
  magLimit = magsAvgVal/magNum;
}


//Print values of raw input array
void printrawInputArray1(){
  for (int i = 0; i < sampleNum; i++) {
    Serial.print(rawInputArray1[i]);
    Serial.print(" ");
  }
  Serial.println();
}


//Print values of frequency bins
void printrawInputArray1Abs(){
  for (int i = 0; i < kdiff; i++) {
    Serial.print(rawInputArray1Abs[i]);
    Serial.print(", ");
  }
  Serial.println();
}


void printFreqsMax(){
  for (int i = 0; i < freqNum; i++) {
    Serial.print(freqsMax[i]);
    Serial.print(" ");
  }
  Serial.println();
}


void printMagsAvg(){
  for (int i = 0; i < magNum; i++) {
    Serial.print(magsAvg[i]);
    Serial.print(" ");
  }
  Serial.println();
}

const int mic = A0;
const float Pi2 = 6.2831853;
uint32_t t0, t;
const uint16_t samples = 256;
volatile uint16_t rawInputArray[samples]={}; 
volatile uint16_t sampleNum = 0;
const uint16_t N = 256;
const float Pi2N = Pi2/N;
const uint8_t kstart = 10;  //beginning frequency is kstart*fs/N
const uint8_t kend = 55;    //ending frequency is kend*fs/N
const uint8_t kdiff = kend - kstart;
float coslookup[kdiff*samples] = {};
float sinlookup[kdiff*samples] = {};
float cosval;
float sinval;
uint16_t modval;


void ClocksInit(void){
  uint32_t tempDFLL48CalibrationCoarse; /* used to retrieve DFLL48 coarse calibration value from NVM */

  // 1) Set Flash wait states for 48 MHz (per Table 37-40 in data sheet)
  NVMCTRL->CTRLB.bit.RWS = 1;   //1 wait state required @ 3.3V & 48MHz
  
  // 2) Enable XOSC32K clock (External on-board 32.768kHz oscillator), will be used as DFLL48M reference.
  // Configure SYSCTRL->XOSC32K settings
  SYSCTRL->XOSC32K.bit.WRTLOCK = 0;     // XOSC32K configuration is not locked
  SYSCTRL->XOSC32K.bit.STARTUP = 0x2;   // 3 cycle start-up time
  SYSCTRL->XOSC32K.bit.ONDEMAND = 0;    // Osc. is always running when enabled
  SYSCTRL->XOSC32K.bit.RUNSTDBY = 0;    // Osc. is disabled in standby sleep mode
  SYSCTRL->XOSC32K.bit.AAMPEN = 0;      // Disable automatic amplitude control
  SYSCTRL->XOSC32K.bit.EN32K = 1;       // 32kHz output is disabled
  SYSCTRL->XOSC32K.bit.XTALEN = 1;       // Crystal connected to XIN32/XOUT32
  
  // Enable the Oscillator - Separate step per data sheet recommendation (sec 17.6.3)
  SYSCTRL->XOSC32K.bit.ENABLE = 1;
  
  // Wait for XOSC32K to stabilize
  while(!SYSCTRL->PCLKSR.bit.XOSC32KRDY);
  
  // 3) Put XOSC32K as source of Generic Clock Generator 1
  // Set the Generic Clock Generator 1 output divider to 1
  // Configure GCLK->GENDIV settings
  GCLK->GENDIV.bit.ID = 0x1; // Apply division factor to Generator 1
  GCLK->GENDIV.bit.DIV = 1;       // Set output division factor = 1
  
  // Configure Generic Clock Generator 1 with XOSC32K as source
  GCLK->GENCTRL.bit.ID = 0x1;     // Select Generic Clock Generator 1
  GCLK->GENCTRL.bit.RUNSTDBY = 0;  // Generic Clock Generator is stopped in stdby
  GCLK->GENCTRL.bit.DIVSEL =  0;   // Use GENDIV.DIV value to divide the generator
  GCLK->GENCTRL.bit.OE = 0;        // Disable generator output to GCLK_IO[1]
  GCLK->GENCTRL.bit.OOV = 0;       // GCLK_IO[1] output value when generator is off
  GCLK->GENCTRL.bit.IDC = 1;       // Generator duty cycle is 50/50
  GCLK->GENCTRL.bit.GENEN = 1;     // Enable the generator
  GCLK->GENCTRL.bit.SRC = 0x05;    // Generator source: XOSC32K output

  // GENCTRL is Write-Synchronized...so wait for write to complete
  while(GCLK->STATUS.bit.SYNCBUSY);
  
  // 4) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
  GCLK->CLKCTRL.bit.ID = 0x0;     // Generic Clock Multiplexer 0 (DFLL48M Reference)
  GCLK->CLKCTRL.bit.WRTLOCK = 0;  // Generic Clock is not locked from subsequent writes
  GCLK->CLKCTRL.bit.CLKEN = 1;    // Enable the Generic Clock
  GCLK->CLKCTRL.bit.GEN = 0x05;   // Generic Clock Generator 1 is the source
  
  // 5) Enable DFLL48M clock
  // DFLL Configuration in Closed Loop mode, cf product data sheet chapter
  // 17.6.7.1 - Closed-Loop Operation
  // Enable the DFLL48M in open loop mode. Without this step, attempts to go into closed loop mode at 48 MHz will
  // result in Processor Reset (you'll be at the in the Reset_Handler in startup_samd21.c).
  // PCLKSR.DFLLRDY must be one before writing to the DFLL Control register
  // Note that the DFLLRDY bit represents status of register synchronization - NOT clock stability
  // (see Data Sheet 17.6.14 Synchronization for detail)
  while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
  SYSCTRL->DFLLCTRL.reg = (uint16_t)(SYSCTRL_DFLLCTRL_ENABLE);
  while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
  
  // Set up the Multiplier, Coarse and Fine steps
  SYSCTRL->DFLLMUL.bit.CSTEP = 31;    // Coarse step - use half of the max value (63)
  SYSCTRL->DFLLMUL.bit.FSTEP = 511;   // Fine step - use half of the max value (1023)
  SYSCTRL->DFLLMUL.bit.MUL = 1465;    // Multiplier = MAIN_CLK_FREQ (48MHz) / EXT_32K_CLK_FREQ (32768 Hz)

  // Wait for synchronization
  while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
  
  // To reduce lock time, load factory calibrated values into DFLLVAL (cf. Data Sheet 17.6.7.1)
  // Location of value is defined in Data Sheet Table 10-5. NVM Software Calibration Area Mapping
  // Get factory calibrated value for "DFLL48M COARSE CAL" from NVM Software Calibration Area
  tempDFLL48CalibrationCoarse = *(uint32_t*)FUSES_DFLL48M_COARSE_CAL_ADDR;
  tempDFLL48CalibrationCoarse &= FUSES_DFLL48M_COARSE_CAL_Msk;
  tempDFLL48CalibrationCoarse = tempDFLL48CalibrationCoarse>>FUSES_DFLL48M_COARSE_CAL_Pos;
  // Write the coarse calibration value
  SYSCTRL->DFLLVAL.bit.COARSE = tempDFLL48CalibrationCoarse;
  // Switch DFLL48M to Closed Loop mode and enable WAITLOCK
  while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
  SYSCTRL->DFLLCTRL.reg |= (uint16_t) (SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_WAITLOCK);
  
  // 6) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
  // Now that DFLL48M is running, switch CLKGEN0 source to it to run the core at 48 MHz.
  // Enable output of Generic Clock Generator 0 (GCLK_MAIN) to the GCLK_IO[0] GPIO Pin
  GCLK->GENCTRL.bit.ID = 0x00;       // Generator ID: 0
  GCLK->GENCTRL.bit.RUNSTDBY = 0;    // Generic Clock Generator is stopped in stdby
  GCLK->GENCTRL.bit.DIVSEL =  0;     // Use GENDIV.DIV value to divide the generator
  GCLK->GENCTRL.bit.OE = 1;          // Enable generator output to GCLK_IO[0]
  GCLK->GENCTRL.bit.OOV = 0;         // GCLK_IO[0] output value when generator is off
  GCLK->GENCTRL.bit.IDC = 1;         // Generator duty cycle is 50/50
  GCLK->GENCTRL.bit.GENEN = 1;       // Enable the generator
  GCLK->GENCTRL.bit.SRC = 0x07;      // Generator source: DFLL48M output

  // GENCTRL is Write-Synchronized...so wait for write to complete
  while(GCLK->STATUS.bit.SYNCBUSY);
  
  // Direct the GCLK_IO[0] output to PA28
  PORT->Group[0].WRCONFIG.bit.HWSEL = 1;       // Pin# (28) - falls in the upper half of the 32-pin PORT group
  PORT->Group[0].WRCONFIG.bit.WRPINCFG = 1;    // Update PINCFGy registers for all pins selected
  PORT->Group[0].WRCONFIG.bit.WRPMUX = 1;      // Update PMUXn registers for all pins selected
  PORT->Group[0].WRCONFIG.bit.PMUX = 7;        // Peripheral Function H selected (GCLK_IO[0])
  PORT->Group[0].WRCONFIG.bit.PMUXEN = 1;      // Enable peripheral Multiplexer
  PORT->Group[0].WRCONFIG.bit.PINMASK = (uint16_t)(1 << (28-16)); // Select the pin(s) to be configured
  
  // 7) Modify prescaler value of OSC8M to produce 8MHz output

  SYSCTRL->OSC8M.bit.PRESC = 0;   /* Prescale by 1 */
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ; /* Oscillator is always on if enabled */
  
  // 8) Set CPU and APBx BUS Clocks to 48MHz
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
  
} // ClockSysInit48M()




void setup() {
  //ClocksInit();
  /*
  GCLK->GENDIV.bit.ID = 0x00;
  GCLK->GENDIV.bit.DIV = 0;
  
  GCLK->GENCTRL.bit.ID = 0x00;
  GCLK->GENCTRL.bit.SRC = 0x07;
  GCLK->GENCTRL.bit.GENEN = 1;
  */
  
  ADC->CTRLA.bit.ENABLE = 0;                     // Disable ADC
  while( ADC->STATUS.bit.SYNCBUSY == 1 );        // Wait for synchronization
  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256 |  // Divide Clock by 256, 10.461kHz
                   ADC_CTRLB_RESSEL_12BIT;       // Result on 12 bits
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |   // 1 sample
                     ADC_AVGCTRL_ADJRES(0x00ul); // Adjusting result by 0
  ADC->SAMPCTRL.reg = 0x00;                      // Sampling Time Length = 0
  ADC->CTRLA.bit.ENABLE = 1;                     // Enable ADC
  while( ADC->STATUS.bit.SYNCBUSY == 1 );        // Wait for synchronization

  analogReadResolution(12);
  Serial.begin(115200);   //begin serial communication
  delay(1000);

  //Populate cos and sin lookup table
  for (int k = 0; k < kdiff; k++){
    for (int i = 0; i < samples; i++) {
      modval = i*(k+kstart) % N;
      coslookup[(k+1)*i] = cos(Pi2N*modval);
      sinlookup[(k+1)*i] = sin(Pi2N*modval);
    }
  }
}


void loop() {
  //initialize arrays to hold real, imag, and abs DFT values. Length is kend-kstart
  float rawInputArrayReal[kdiff] = {};
  float rawInputArrayImag[kdiff] = {};
  float rawInputArrayAbs[kdiff] = {};
  float maximum = 0;
  uint8_t index = 0;
  delay(100);
  Serial.println("GO");   //inidicates start of DFT
  
  //t0 = millis();
  while (sampleNum < samples) {
    rawInputArray[sampleNum] = analogRead(mic);
    sampleNum++;
  }
  
  //t = millis()-t0;
  //Serial.println(t);
  
  //DFT
  for (int k = 0; k < kdiff; k++){
    for (int i = 0; i < samples; i++) {
      modval = i*(k+kstart) % N;
      cosval = cos(Pi2N*modval);
      sinval = sqrt( 1 - sq(cosval) );
      if ( modval > 128 ) {
        sinval = -sinval;
      }
      rawInputArrayReal[k] = rawInputArrayReal[k] + (rawInputArray[i] * cosval);
      rawInputArrayImag[k] = rawInputArrayImag[k] + (rawInputArray[i] * sinval);
    }
    rawInputArrayAbs[k] = sqrt( sq(rawInputArrayReal[k]) + sq(rawInputArrayImag[k]) );
  }
  
  //t = millis()-t0;
  //Serial.println(t);
  
  //finding maximum frequency bin
  for (int i = 0; i < kdiff; i++) {
    if (rawInputArrayAbs[i] > maximum) {
      maximum = rawInputArrayAbs[i];
      index = i;
    }
  }
  
  //t = millis()-t0;
  //Serial.println(t);
  
  Serial.println((index+kstart)*40.86328125);
  
  /*
  for (int i = 0; i < samples; i++) {
    Serial.println(rawInputArray[i]);
  }
  */

  /*
  for (int i = 0; i < kdiff; i++) {
    Serial.println(rawInputArrayAbs[i]);
  }
  */

  if (sampleNum >= samples) {
    sampleNum = 0;
  }
}
